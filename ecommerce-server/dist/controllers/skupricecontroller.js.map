{"version":3,"sources":["../../src/controllers/skupricecontroller.js"],"names":["Checkout","require","PricingRules","logger","getSKUs","upsertSKUs","checkoutSchema","updateSKUSchema","Ajv","ajv","exports","checkout","items","info","length","result","validate","skus","pricingRules","forEach","item","scan","total","Error","err","skusDB","data","sku","name","price","img","push","updateSKUs"],"mappings":"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","sourcesContent":["'use strict';\nconst Checkout = require('../components/checkout');\nconst PricingRules = require('../components/pricingrules');\nconst logger = require('../logger/logger');\nconst { getSKUs, upsertSKUs } = require('../utils/utils');\nconst { checkoutSchema, updateSKUSchema } = require('../models/schema');\nconst Ajv = require('ajv');\nconst ajv = new Ajv();\n\n/**\n * Retrieve the total price at checkout token from the given service.\n * @param {items} items of the remote service\n * @return {total of the checkedout cart}\n */\n\nexports.checkout = async (items) => {\n  logger.info(`[+] Total number of items checkedout ${items.length}`);\n  try {\n    const result = ajv.validate(checkoutSchema, items);\n    logger.info(`[+] Schema validation result is ${result}`);\n    if(result) {\n      const skus = await getSKUs();\n      const pricingRules = new PricingRules(skus);\n      const checkout = new Checkout(pricingRules);\n      items.forEach((item) => {\n        checkout.scan(item);\n      });\n      return checkout.total();\n    } else {\n      // Throw error to catch at the called method to send proper error response.\n      throw Error(\"schema validation failed!\");\n    }\n  }\n  catch (err)\n  {\n      // Throw error to catch at the called method to send proper error response.\n      throw Error(err);\n  }\n};\n\n/**\n * Retrieve the list of all SKUs from the given DB.\n * @param {url} URL of the remote service\n * @return {skus}\n */\n\nexports.getSKUs = async () => {\n  logger.info('[+] Retrieve list of SKUs');\n  try {\n    const skusDB = await getSKUs();\n    let skus = [];\n    skusDB.forEach(async (data) => {\n      let sku = {}\n      sku.sku = data.sku;\n      sku.name = data.name;\n      sku.price = data.price;\n      sku.img = data.img;\n      skus.push(sku);\n    });\n    return skus;\n  }\n  catch (err)\n  {\n      // Throw error to catch at the called method to send proper error response.\n      throw Error(err);\n  }\n};\n\n/**\n * Insert/Update the SKU(s) from the given DB.\n * @param {url} URL of the remote service\n * @return {response data}\n */\n\nexports.updateSKUs = async (items) => {\n  logger.info('[+] Retrieve list of SKUs');\n  try {\n    const result = ajv.validate(updateSKUSchema, items);\n    logger.info(`[+] Schema validation result is ${result}`);\n    if(result) {\n      await upsertSKUs(items);\n    } else {\n      // Throw error to catch at the called method to send proper error response.\n      throw Error(\"schema validation failed!\");\n    }\n  }\n  catch (err)\n  {\n      // Throw error to catch at the called method to send proper error response.\n      throw Error(err);\n  }\n};"],"file":"skupricecontroller.js"}