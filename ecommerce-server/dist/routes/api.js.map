{"version":3,"sources":["../../src/routes/api.js"],"names":["express","require","logger","successResponse","errorResponse","skuPriceController","router","Router","post","request","response","info","totalprice","checkout","body","err","message","get","getSKUs","updateSKUs","module","exports"],"mappings":"AAAA;;;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAM;AAAEE,EAAAA,eAAF;AAAmBC,EAAAA;AAAnB,IAAqCH,OAAO,CAAC,gBAAD,CAAlD;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,mCAAD,CAAlC,C,CAEA;;;AACA,MAAMK,MAAM,GAAGN,OAAO,CAACO,MAAR,EAAf;AAEA;;;;;;;AAOAD,MAAM,CAACE,IAAP,CAAY,WAAZ,EAAyB,OAAOC,OAAP,EAAgBC,QAAhB,KAA6B;AACpDR,EAAAA,MAAM,CAACS,IAAP,CAAY,qBAAZ;;AACA,MAAI;AACF,QAAIC,UAAU,GAAG,MAAMP,kBAAkB,CAACQ,QAAnB,CAA4BJ,OAAO,CAACK,IAApC,CAAvB;AACAZ,IAAAA,MAAM,CAACS,IAAP,CAAY,0CAAZ;AACA,WAAOR,eAAe,CACpBO,QADoB,EAEpB,wDAFoB,EAGpBE,UAHoB,CAAtB;AAKD,GARD,CASA,OAAOG,GAAP,EAAY;AACVb,IAAAA,MAAM,CAACS,IAAP,CAAY,kDAAZ;AACA,WAAOP,aAAa,CAChBM,QADgB,mDAE0BK,GAAG,CAACC,OAF9B,YAGhB,GAHgB,CAApB;AAKD;AACF,CAnBD;AAqBA;;;;;;;AAOAV,MAAM,CAACW,GAAP,CAAW,UAAX,EAAuB,OAAOR,OAAP,EAAgBC,QAAhB,KAA6B;AAClDR,EAAAA,MAAM,CAACS,IAAP,CAAY,oBAAZ;;AACA,MAAI;AACF,QAAIO,OAAO,GAAG,MAAMb,kBAAkB,CAACa,OAAnB,EAApB;AACA,WAAOf,eAAe,CACpBO,QADoB,EAEpB,+DAFoB,EAGpBQ,OAHoB,CAAtB;AAKD,GAPD,CAQA,OAAOH,GAAP,EAAY;AACVb,IAAAA,MAAM,CAACS,IAAP,CAAY,kCAAZ;AACA,WAAOP,aAAa,CAChBM,QADgB,sDAE6BK,GAAG,CAACC,OAFjC,YAGhB,GAHgB,CAApB;AAKD;AACF,CAlBD;AAoBA;;;;;;;AAOAV,MAAM,CAACE,IAAP,CAAY,aAAZ,EAA2B,OAAOC,OAAP,EAAgBC,QAAhB,KAA6B;AACtDR,EAAAA,MAAM,CAACS,IAAP,CAAY,uBAAZ;;AACA,MAAI;AACF,UAAMN,kBAAkB,CAACc,UAAnB,CAA8BV,OAAO,CAACK,IAAtC,CAAN;AACA,WAAOX,eAAe,CACpBO,QADoB,EAEpB,mEAFoB,EAGpB,IAHoB,CAAtB;AAKD,GAPD,CAQA,OAAOK,GAAP,EAAY;AACVb,IAAAA,MAAM,CAACS,IAAP,CAAY,uCAAZ;AACA,WAAOP,aAAa,CAChBM,QADgB,mDAE0BK,GAAG,CAACC,OAF9B,YAGhB,GAHgB,CAApB;AAKD;AACF,CAlBD;AAmBAI,MAAM,CAACC,OAAP,GAAiBf,MAAjB","sourcesContent":["'use strict';\nconst express = require('express');\nconst logger = require('../logger/logger');\nconst { successResponse, errorResponse } = require('../utils/utils');\nconst skuPriceController = require('../controllers/skupricecontroller');\n\n// eslint-disable-next-line new-cap\nconst router = express.Router();\n\n/**\n * Router POST call with '/checkout' endpoint.\n * @param {request} request from the client app\n * @param {response} response object for the client app\n * @return {response object}\n */\n\nrouter.post('/checkout', async (request, response) => {\n  logger.info('[+] In the checkout');\n  try {\n    let totalprice = await skuPriceController.checkout(request.body);\n    logger.info('[+] Total price calculated successfully.');\n    return successResponse(\n      response,\n      '<h1>The price is calculated by ECommerce service.</h1>',\n      totalprice\n    );\n  }\n  catch (err) {\n    logger.info('[+] Exception thrown in calculating total price.');\n    return errorResponse(\n        response,\n        `<h1>The schema validation error thrown ${err.message}</h1>`,\n        400\n      );\n  }  \n});\n\n/**\n * Router GET call with '/getSKUs' endpoint.\n * @param {request} request from the client app\n * @param {response} response object for the client app\n * @return {response object}\n */\n\nrouter.get('/getSKUs', async (request, response) => {\n  logger.info('[+] In the getSKUs');\n  try {\n    let getSKUs = await skuPriceController.getSKUs();\n    return successResponse(\n      response,\n      '<h1>The list of SKUs are retrieved by ECommerce service.</h1>',\n      getSKUs\n    );\n  }\n  catch (err) {\n    logger.info('[+] Exception thrown in get SKUs');\n    return errorResponse(\n        response,\n        `<h1>The retrieve SKUs API threw exception ${err.message}</h1>`,\n        500\n      );\n  }  \n});\n\n/**\n * Router POST call with '/updateSKUs' endpoint.\n * @param {request} request from the client app\n * @param {response} response object for the client app\n * @return {response object}\n */\n\nrouter.post('/updateSKUs', async (request, response) => {\n  logger.info('[+] In the updateSKUs');\n  try {\n    await skuPriceController.updateSKUs(request.body);\n    return successResponse(\n      response,\n      '<h1>The given SKU(s) updated by ECommerce service in its DB.</h1>',\n      'OK'\n    );\n  }\n  catch (err) {\n    logger.info('[+] Exception thrown in updating SKUs');\n    return errorResponse(\n        response,\n        `<h1>The schema validation error thrown ${err.message}</h1>`,\n        400\n      );\n  }  \n});\nmodule.exports = router;\n"],"file":"api.js"}