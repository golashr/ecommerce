{"version":3,"sources":["../src/service.js"],"names":["http","require","dotenv","path","logger","db","utils","server","info","process","env","NODE_ENV","config","resolve","cwd","DB_URI","mongodb","host","port","dbName","connect","then","initSKU","httpServer","createServer","listen","PORT","shutDown","close","exit","on","module","exports"],"mappings":"AAAA;;;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,iBAAD,CAAlB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,eAAD,CAArB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,SAAD,CAAtB;;AAEAG,MAAM,CAACI,IAAP,mEAAuEC,OAAO,CAACC,GAAR,CAAYC,QAAnF;AACAT,MAAM,CAACU,MAAP,CAAc;AACZT,EAAAA,IAAI,EAAEA,IAAI,CAACU,OAAL,CAAaJ,OAAO,CAACK,GAAR,EAAb,2BAA8CL,OAAO,CAACC,GAAR,CAAYC,QAA1D;AADM,CAAd;;AAIA,MAAMC,MAAM,GAAGX,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAMc,MAAM,uBAAgBH,MAAM,CAACI,OAAP,CAAeC,IAA/B,cAAuCL,MAAM,CAACI,OAAP,CAAeE,IAAtD,cAA8DN,MAAM,CAACI,OAAP,CAAeG,MAA7E,CAAZ;AACAd,EAAE,CAACe,OAAH,CAAWL,MAAX,EAAmBM,IAAnB,CAAwB,YAAY;AAClCjB,EAAAA,MAAM,CAACI,IAAP,sCAA0CO,MAA1C;AACA,QAAMT,KAAK,CAACgB,OAAN,EAAN;AACD,CAHD;AAKA,MAAMC,UAAU,GAAGvB,IAAI,CAACwB,YAAL,CAAkBjB,MAAlB,CAAnB;AACAgB,UAAU,CAACE,MAAX,CAAkBhB,OAAO,CAACC,GAAR,CAAYgB,IAA9B,EAAoC,MAAM;AACxCtB,EAAAA,MAAM,CAACI,IAAP,gDAAoDC,OAAO,CAACC,GAAR,CAAYgB,IAAhE;AACD,CAFD;;AAIA,MAAMC,QAAQ,GAAG,YAAY;AAC3BvB,EAAAA,MAAM,CAACI,IAAP,CAAY,8BAAZ;AACAJ,EAAAA,MAAM,CAACI,IAAP,CAAY,0BAAZ;AACA,QAAMe,UAAU,CAACK,KAAX,EAAN;AACAxB,EAAAA,MAAM,CAACI,IAAP,CAAY,yBAAZ;AACA,QAAMH,EAAE,CAACuB,KAAH,EAAN;AACAxB,EAAAA,MAAM,CAACI,IAAP,CAAY,oBAAZ;AACAC,EAAAA,OAAO,CAACoB,IAAR,CAAa,CAAb;AACD,CARD;;AAUApB,OAAO,CAACqB,EAAR,CAAW,SAAX,EAAsBH,QAAtB;AACAlB,OAAO,CAACqB,EAAR,CAAW,QAAX,EAAqBH,QAArB;AAEAI,MAAM,CAACC,OAAP,CAAed,IAAf,GAAsBT,OAAO,CAACC,GAAR,CAAYgB,IAAlC;AACAK,MAAM,CAACC,OAAP,CAAetB,GAAf,GAAqBD,OAAO,CAACC,GAAR,CAAYC,QAAjC;AACAoB,MAAM,CAACC,OAAP,CAAejB,MAAf,GAAwBN,OAAO,CAACC,GAAR,CAAYK,MAApC","sourcesContent":["'use strict';\nconst http = require('http');\nconst dotenv = require('dotenv');\nconst path = require('path');\nconst logger = require('./logger/logger');\nconst db = require('./components/db');\nconst utils = require('./utils/utils');\nconst server = require('./index');\n\nlogger.info(`[+] Loading Environment Variables from '../environments/${process.env.NODE_ENV}/.env'`);\ndotenv.config({\n  path: path.resolve(process.cwd(), `./environments/${process.env.NODE_ENV}/.env`),\n});\n\nconst config = require('./config/config');\nconst DB_URI = `mongodb://${config.mongodb.host}:${config.mongodb.port}/${config.mongodb.dbName}`;\ndb.connect(DB_URI).then(async () => {\n  logger.info(`[+] Connected to MongoD at ${DB_URI}`);\n  await utils.initSKU();\n});\n\nconst httpServer = http.createServer(server);\nhttpServer.listen(process.env.PORT, () => {\n  logger.info(`[+] ECommerce server running on port ${process.env.PORT}`);\n});\n\nconst shutDown = async () => {\n  logger.info('[+] SIGTERM signal received.');\n  logger.info('[+] Closing http server.');\n  await httpServer.close();\n  logger.info('[+] Http server closed.');\n  await db.close();\n  logger.info('[+] MongoDB closed');\n  process.exit(0);\n};\n\nprocess.on('SIGTERM', shutDown);\nprocess.on('SIGINT', shutDown);\n\nmodule.exports.port = process.env.PORT;\nmodule.exports.env = process.env.NODE_ENV;\nmodule.exports.DB_URI = process.env.DB_URI;\n"],"file":"service.js"}